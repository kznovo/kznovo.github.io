{"version":3,"sources":["manage.blog.posts.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","__webpack_exports__","date","title","component","React","lazy","Promise","all","e","then","bind","url","summary","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Home","About","App","react_default","a","createElement","HashRouter","hashType","Switch","Route","exact","path","Suspense","fallback","blogPosts","map","b","key","concat","Component","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yFAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAEeI,EAAA,GACb,CACEC,KAAM,aACNC,MAAO,wFACPC,UAAWC,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAV,EAAAW,EAAA,GAAAX,EAAAW,EAAA,KAAAC,KAAAZ,EAAAa,KAAA,YAC5BC,IAAK,6CACLC,QAAS,8DAEX,CACEX,KAAM,aACNC,MAAO,yCACPC,UAAWC,IAAMC,KAAK,kBAAMR,EAAAW,EAAA,GAAAC,KAAAZ,EAAAa,KAAA,YAC5BC,IAAK,kDACLC,QAAS,mJAEX,CACEX,KAAM,aACNC,MAAO,oDACPC,UAAWC,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAV,EAAAW,EAAA,GAAAX,EAAAW,EAAA,KAAAC,KAAAZ,EAAAa,KAAA,YAC5BC,IAAK,sDACLC,QAAS,wbCVPC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTX,KAAK,SAAAgB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KCxFjE,IAAMC,EAAOlC,IAAMC,KAAK,kBAAMR,EAAAW,EAAA,GAAAC,KAAAZ,EAAAa,KAAA,aAExB6B,EAAQnC,IAAMC,KAAK,kBAAMR,EAAAW,EAAA,GAAAC,KAAAZ,EAAAa,KAAA,aAGzB8B,mLAEF,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,SAAS,YACfJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KAEEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,KAChBR,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,CAAgBC,SAAUV,EAAAC,EAAAC,cAAA,wBACxBF,EAAAC,EAAAC,cAACL,EAAD,QAIJG,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAChBR,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,CAAgBC,SAAUV,EAAAC,EAAAC,cAAA,wBACxBF,EAAAC,EAAAC,cAACJ,EAAD,QAIHa,IAAUC,IAAI,SAAAC,GAAC,OACdb,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOQ,IAAKD,EAAErD,KAAM+C,OAAK,EAACC,KAAI,SAAAO,OAAWF,EAAE3C,MACzC8B,EAAAC,EAAAC,cAACF,EAAAC,EAAMQ,SAAP,CAAgBC,SAAUV,EAAAC,EAAAC,cAAA,wBACvBvC,IAAMuC,cAAcW,EAAEnD,UAAW,CAACD,MAAOoD,EAAEpD,MAAOD,KAAMqD,EAAErD,oBArBzDG,IAAMqD,WAiCxBC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SDxB1C,SAAkBzC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyC,IAAIC,GAAwBjD,OAAOC,SAASiD,MACpDC,SAAWnD,OAAOC,SAASkD,OAIvC,OAGFnD,OAAOoD,iBAAiB,OAAQ,WAC9B,IAAM/C,EAAK,GAAAoC,OAAMQ,GAAN,sBAEPnD,GAgEV,SAAiCO,EAAOC,GAEtC+C,MAAMhD,GACHX,KAAK,SAAA4D,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CpD,UAAUC,cAAcoD,MAAMlE,KAAK,SAAAgB,GACjCA,EAAamD,aAAanE,KAAK,WAC7BM,OAAOC,SAAS6D,aAKpB1D,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFA6C,CAAwB1D,EAAOC,GAI/BC,UAAUC,cAAcoD,MAAMlE,KAAK,WACjCuB,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MCE/BE","file":"static/js/main.cae4e1dd.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default [\n  {\n    date: \"2019-01-13\",\n    title: \"Blog Project #2: Using hashbang URLs to deal with client-side routing on GitHub Pages\",\n    component: React.lazy(() => import(\"./components/blog/20190112\" /* webpackChunkName: \"20190112-hashbang\" */)),\n    url: \"2019/01/13/blog-project-2-hashbang-routing\",\n    summary: \"I explain why I chose hash-based routing for this website.\"\n  },\n  {\n    date: \"2019-01-05\",\n    title: \"Blog Project #1: Creating a basic blog\",\n    component: React.lazy(() => import(\"./components/blog/20190105\" /* webpackChunkName: \"20190105\" */)),\n    url: \"2019/01/05/blog-project-1-creating-a-basic-blog\",\n    summary: \"I wrote about how I bootstrapped this website using react and github pages. I also wrote about what I want to do on this website in the future.\"\n  },\n  {\n    date: \"2018-10-17\",\n    title: \"python responder の簡単なREST API\",\n    component: React.lazy(() => import(\"./components/blog/20181017\" /* webpackChunkName: \"20181017\" */)),\n    url: \"2018/10/17/simple-handson-python-responder-rest-api\",\n    summary: \"とても簡単なハンズオンです。初めてGitHubのプロジェクトにイシューをあげました。\"\n  },\n];","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './index.css';\nimport blogPosts from \"./manage.blog.posts\";\nimport * as serviceWorker from './serviceWorker';\n\n\nconst Home = React.lazy(() => import(\"./components/Home\" /* webpackChunkName: \"home\" */));\n\nconst About = React.lazy(() => import(\"./components/About\" /* webpackChunkName: \"about\" */));\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router hashType=\"hashbang\">\n        <Switch>\n\n          <Route exact path=\"/\">\n            <React.Suspense fallback={<p>Loading...</p>}>\n              <Home/>\n            </React.Suspense>\n          </Route>\n\n          <Route exact path=\"/about\">\n            <React.Suspense fallback={<p>Loading...</p>}>\n              <About/>\n            </React.Suspense>\n          </Route>\n\n          {blogPosts.map(b => (\n            <Route key={b.date} exact path={`/blog/${b.url}`}>\n              <React.Suspense fallback={<p>Loading...</p>}>\n                {React.createElement(b.component, {title: b.title, date: b.date})}\n              </React.Suspense>\n            </Route>\n          ))}\n\n        </Switch>\n      </Router>\n    );\n  }\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}