{"version":3,"sources":["components/blog/20181017/index.js"],"names":["Code1","React","lazy","__webpack_require__","e","then","bind","Code2","Code3","Code4","Code5","Code6","Code7","Post20181017","document","title","this","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Fragment","href","target","rel","react_highlight__WEBPACK_IMPORTED_MODULE_6___default","className","Suspense","fallback","Component"],"mappings":"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","file":"static/js/20181017.2c7d5bd8.chunk.js","sourcesContent":["import React from \"react\";\nimport Highlight from \"react-highlight\";\nimport \"../Blog.css\";\n\nconst Code1 = React.lazy(() => import(\"./exports/Code1\" /* webpackChunkName: \"code1\" */));\nconst Code2 = React.lazy(() => import(\"./exports/Code2\" /* webpackChunkName: \"code2\" */));\nconst Code3 = React.lazy(() => import(\"./exports/Code3\" /* webpackChunkName: \"code3\" */));\nconst Code4 = React.lazy(() => import(\"./exports/Code4\" /* webpackChunkName: \"code4\" */));\nconst Code5 = React.lazy(() => import(\"./exports/Code5\" /* webpackChunkName: \"code5\" */));\nconst Code6 = React.lazy(() => import(\"./exports/Code6\" /* webpackChunkName: \"code6\" */));\nconst Code7 = React.lazy(() => import(\"./exports/Code7\" /* webpackChunkName: \"code7\" */));\n\n\nexport default class Post20181017 extends React.Component {\n\n  componentDidMount() {\n    document.title = \"Kznovo - \" + this.props.title;\n  }\n  \n  render() {\n    return(\n<>\n<h2>python responder の簡単なREST API</h2>\n<small>2018/10/17</small>\n<h3>はじめに</h3>\n<p>\n  新しいpythonのサーバー開発用パッケージである<a href=\"http://python-responder.org/en/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">responder</a>を使って簡単なREST APIを作ります。\n</p>\n\n<h3>環境構築</h3>\n<p>pipenvを使って環境構築をします。</p>\n<Highlight className=\"shell code\">{\"$ pipenv --python 3.6 && pipenv install responder\"}</Highlight>\n<p>ちなみに、こんなエラーが出ることがあります。</p>\n<Highlight className=\"shell code\">{\"TypeError: 'module' object is not callable\"}</Highlight>\n<p>\n  これはPipenvのバグで、pip18.1を使っているとエラーがでます。(10/17/2018現在)<br/>\n  pip18.0にダウングレードすると直ります。\n</p>\n<Highlight className=\"shell code\">{\"$ pipenv run pip install pip==18.0\"}</Highlight>\n\n\n<h3>REST API (hello world)</h3>\n<ol>\n  <li>\n    GETしたら\"hello world\"と返る基本のREST APIを書く。\n    <React.Suspense fallback=\"loading...\">\n      <Code1/>\n    </React.Suspense>\n  </li>\n\n  <li>\n    サーバー開始\n    <React.Suspense fallback=\"loading...\">\n      <Code2/>\n    </React.Suspense>\n  </li>\n\n  <li>\n    別ターミナルを使い、curlでチェックすると返ってきます。\n    <React.Suspense fallback=\"loading...\">\n      <Code3/>\n    </React.Suspense>\n    \n  </li>\n\n  <li>\n    サーバー側のログもチェック\n    <React.Suspense fallback=\"loading...\">\n      <Code4/>\n    </React.Suspense>\n  </li>\n</ol>\n\n<h3>HTMLのページをサーバーサイドレンダリングする</h3>\n<p>\n  HTMLを返すエンドポイントを作ります。<br/>\n  responderでは<a href=\"http://jinja.pocoo.org/\" target=\"_blank\" rel=\"noopener noreferrer\">jinja2</a>というテンプレートエンジンが使われています。<br/>\n  実は上でサーバーを起動した際に、自動で \"static/\" と \"templates/\" の二つのファイルがルートに作成されています。ここに返すHTMLを作ります。\n</p>\n\n<ol>\n  <li>\n    jinja2を使ってテンプレートを書く。\n    <React.Suspense fallback=\"loading...\">\n      <Code5/>\n    </React.Suspense>\n  </li>\n\n  <li>\n    エンドポイントを作る。\"name\" の変数を取れるようにコードを変更したのと、テンプレートのレンダリング時に使うメソッドを選択している点に注意。\n    <React.Suspense fallback=\"loading...\">\n      <Code6/>\n    </React.Suspense>\n  </li>\n\n  <li>\n    先ほど同様サーバーを起動させて、curlでテストすると、URLのパラメーターに渡した変数がページにも反映されることがわかる。\n    <React.Suspense fallback=\"loading...\">\n      <Code7/>\n    </React.Suspense>\n  </li>\n\n</ol>\n<p>ちなみにこのコードを実行した時にエラーが出て、<a href=\"https://github.com/kennethreitz/responder/issues/76\" target=\"_blank\" rel=\"noopener noreferrer\">GitHubでイシューをあげたら直してもらえました</a>。</p>\n\n<h3>最後に</h3>\n<p>WSGI規格のflaskと比べるとよりモダンなASGIを使ったライブラリなので、asyncによって性能にどのような影響があるかもっと見ていこうと思いました。</p>\n</>\n    );\n  }\n}"],"sourceRoot":""}