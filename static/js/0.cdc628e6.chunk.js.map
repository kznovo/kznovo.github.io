{"version":3,"sources":["components/blog/20181017.python-responder-simple-rest-api.js"],"names":["Post20181017","document","title","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Fragment","href","target","rel","react_highlight__WEBPACK_IMPORTED_MODULE_6___default","className","React","Component"],"mappings":"iNAKqBA,qMAGjBC,SAASC,MAAQ,8FAIjB,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,kEACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,oIAC2BF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,yCAAyCC,OAAO,SAASC,IAAI,uBAArE,aAD3B,0FAIAN,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,iGACAF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWO,UAAU,cAAc,qDACnCR,EAAAC,EAAAC,cAAA,iJACAF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWO,UAAU,cAAc,8CACnCR,EAAAC,EAAAC,cAAA,2LACoDF,EAAAC,EAAAC,cAAA,WADpD,2GAIAF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWO,UAAU,cAAc,sCAGnCR,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mHAEEF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWO,UAAU,eAArB,oOAkBFR,EAAAC,EAAAC,cAAA,iDAEEF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWO,UAAU,cAArB,2KASFR,EAAAC,EAAAC,cAAA,uKAEEF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWO,UAAU,cAArB,iEASFR,EAAAC,EAAAC,cAAA,2FAEEF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWO,UAAU,cAArB,gFAQJR,EAAAC,EAAAC,cAAA,0IACAF,EAAAC,EAAAC,cAAA,gHACsBF,EAAAC,EAAAC,cAAA,WADtB,wBAEaF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,0BAA0BC,OAAO,SAASC,IAAI,uBAAtD,UAFb,uIAEyHN,EAAAC,EAAAC,cAAA,WAFzH,+VAMAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uGAEEF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWO,UAAU,aAArB,sPAmBFR,EAAAC,EAAAC,cAAA,0ZAEEF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWO,UAAU,eAArB,6QAkBFR,EAAAC,EAAAC,cAAA,8VAEEF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWO,UAAU,cAArB,kPAkBJR,EAAAC,EAAAC,cAAA,sJAA0BF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,sDAAsDC,OAAO,SAASC,IAAI,uBAAlF,4HAA1B,UAEAN,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,+YA1JkCO,IAAMC","file":"static/js/0.cdc628e6.chunk.js","sourcesContent":["import React from \"react\";\nimport Highlight from \"react-highlight\";\nimport \"./Blog.css\";\n\n\nexport default class Post20181017 extends React.Component {\n\n  componentDidMount() {\n    document.title = \"Kznovo - python responder の簡単なREST API\";\n  }\n  \n  render() {\n    return(\n      <React.Fragment>\n        <h2>python responder の簡単なREST API</h2>\n        <small>2018/10/17</small>\n        <h3>はじめに</h3>\n        <p>\n          新しいpythonのサーバー開発用パッケージである<a href=\"http://python-responder.org/en/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">responder</a>を使って簡単なREST APIを作ります。\n        </p>\n\n        <h3>環境構築</h3>\n        <p>pipenvを使って環境構築をします。</p>\n        <Highlight className=\"shell code\">{\"$ pipenv --python 3.6 && pipenv install responder\"}</Highlight>\n        <p>ちなみに、こんなエラーが出ることがあります。</p>\n        <Highlight className=\"shell code\">{\"TypeError: 'module' object is not callable\"}</Highlight>\n        <p>\n          これはPipenvのバグで、pip18.1を使っているとエラーがでます。(10/17/2018現在)<br/>\n          pip18.0にダウングレードすると直ります。\n        </p>\n        <Highlight className=\"shell code\">{\"$ pipenv run pip install pip==18.0\"}</Highlight>\n        \n\n        <h3>REST API (hello world)</h3>\n        <ol>\n          <li>\n            GETしたら\"hello world\"と返る基本のREST APIを書く。\n            <Highlight className=\"python code\">\n              {`\n# server_responder.py\n\nimport responder\n\napi = responder.API()\n\n@api.route(\"/hello\")\nasync def hello(req, resp):\n    resp.text = \"Hello World!\"\n\nif __name__ == \"__main__\":\n    api.run(port=3000)\n              `}\n            </Highlight>\n          </li>\n\n          <li>\n            サーバー開始\n            <Highlight className=\"shell code\">\n              {`\n$ pipenv run python server_responder.py\nINFO: Started server process [91078]\nINFO: Uvicorn running on http://127.0.0.1:3000 (Press CTRL+C to quit)\n              `}\n            </Highlight>\n          </li>\n\n          <li>\n            別ターミナルを使い、curlでチェックすると返ってきます。\n            <Highlight className=\"shell code\">\n              {`\n$ curl localhost:3000/hello\nHello World!$\n              `}\n            </Highlight>\n            \n          </li>\n\n          <li>\n            サーバー側のログもチェック\n            <Highlight className=\"shell code\">\n              {`\nINFO: ('127.0.0.1', 53672) - \"GET /hello HTTP/1.1\" 200\n              `}\n            </Highlight>\n          </li>\n        </ol>\n\n        <h3>HTMLのページをサーバーサイドレンダリングする</h3>\n        <p>\n          HTMLを返すエンドポイントを作ります。<br/>\n          responderでは<a href=\"http://jinja.pocoo.org/\" target=\"_blank\" rel=\"noopener noreferrer\">jinja2</a>というテンプレートエンジンが使われています。<br/>\n          実は上でサーバーを起動した際に、自動で \"static/\" と \"templates/\" の二つのファイルがルートに作成されています。ここに返すHTMLを作ります。\n        </p>\n\n        <ol>\n          <li>\n            jinja2を使ってテンプレートを書く。\n            <Highlight className=\"html code\">\n              {`\n<!-- templates/page.html -->\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>html page</title>\n    </head>\n    <body>\n        <h1>Hello, {{ name }}!</h1>\n    </body>\n</html>\n              `}\n            \n          </Highlight>\n          </li>\n\n          <li>\n            エンドポイントを作る。\"name\" の変数を取れるようにコードを変更したのと、テンプレートのレンダリング時に使うメソッドを選択している点に注意。\n            <Highlight className=\"python code\">\n              {`\n# server_responder.py\n\nimport responder\n\napi = responder.API()\n\n@api.route(\"/hello/{name}\")\nasync def hello(req, resp, *, name):\n    resp.content = api.template(\"page.html\", name=name)\n\nif __name__ == \"__main__\":\n    api.run(port=3000)\n              `}\n            </Highlight>\n          </li>\n\n          <li>\n            先ほど同様サーバーを起動させて、curlでテストすると、URLのパラメーターに渡した変数がページにも反映されることがわかる。\n            <Highlight className=\"shell code\">\n              {`\n$ curl localhost:3000/hello/kazuya\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>html page</title>\n    </head>\n    <body>\n        <h1>Hello, kazuya!</h1>\n    </body>\n</html>$\n              `}\n            </Highlight>\n          </li>\n\n        </ol>\n        <p>ちなみにこのコードを実行した時にエラーが出て、<a href=\"https://github.com/kennethreitz/responder/issues/76\" target=\"_blank\" rel=\"noopener noreferrer\">GitHubでイシューをあげたら直してもらえました</a>。</p>\n\n        <h3>最後に</h3>\n        <p>WSGI規格のflaskと比べるとよりモダンなASGIを使ったライブラリなので、asyncによって性能にどのような影響があるかもっと見ていこうと思いました。</p>\n      </React.Fragment>\n    );\n  }\n}"],"sourceRoot":""}