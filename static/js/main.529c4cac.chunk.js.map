{"version":3,"sources":["manage.blog.posts.js","components/blog lazy /^/.//.*$/ groupOptions: {} namespace object","serviceWorker.js","index.js"],"names":["__webpack_exports__","date","title","file","url","summary","map","./20181017.python-responder-simple-rest-api","./20181017.python-responder-simple-rest-api.js","./Blog.css","webpackAsyncContext","req","ids","Promise","all","slice","__webpack_require__","e","then","id","t","resolve","Error","code","keys","Object","module","exports","Boolean","window","location","hostname","match","Home","React","lazy","bind","About","App","react_default","a","createElement","BrowserRouter","Switch","Route","exact","path","Suspense","fallback","mbp","b","i","Component","concat","key","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFAAeA,EAAA,GACb,CACEC,KAAM,aACNC,MAAO,oDACPC,KAAM,+CACNC,IAAK,mCACLC,QAAS,gTCNb,IAAAC,EAAA,CACAC,8CAAA,CACA,GACA,EACA,EACA,GAEAC,iDAAA,CACA,GACA,EACA,EACA,GAEAC,aAAA,CACA,GACA,EACA,IAGA,SAAAC,EAAAC,GACA,IAAAC,EAAAN,EAAAK,GACA,OAAAC,EAOAC,QAAAC,IAAAF,EAAAG,MAAA,GAAAT,IAAAU,EAAAC,IAAAC,KAAA,WACA,IAAAC,EAAAP,EAAA,GACA,OAAAI,EAAAI,EAAAD,EAAAP,EAAA,MARAC,QAAAQ,UAAAH,KAAA,WACA,IAAAD,EAAA,IAAAK,MAAA,uBAAAX,EAAA,KAEA,MADAM,EAAAM,KAAA,mBACAN,IAQAP,EAAAc,KAAA,WACA,OAAAC,OAAAD,KAAAlB,IAEAI,EAAAS,GAAA,GACAO,EAAAC,QAAAjB,8JCzBoBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAOC,IAAMC,KAAK,kBAAMnB,EAAAC,EAAA,GAAAC,KAAAF,EAAAoB,KAAA,aAExBC,EAAQH,IAAMC,KAAK,kBAAMnB,EAAAC,EAAA,GAAAC,KAAAF,EAAAoB,KAAA,aAGzBE,mLAEF,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAEEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,KAChBP,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,CAAgBC,SAAUT,EAAAC,EAAAC,cAAA,wBACxBF,EAAAC,EAAAC,cAACR,EAAD,QAIJM,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAChBP,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,CAAgBC,SAAUT,EAAAC,EAAAC,cAAA,wBACxBF,EAAAC,EAAAC,cAACJ,EAAD,QAIHY,IAAI3C,IAAI,SAAC4C,EAAGC,GACX,IAAMC,EAAYlB,IAAMC,KAAK,kBAAMnB,EAAA,GAAAA,CAAO,KAAAqC,OAAqBH,EAAE/C,SACjE,OACEoC,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOU,IAAKH,EAAGN,OAAK,EAACC,KAAI,SAAAO,OAAWH,EAAE9C,MACpCmC,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,CAAgBC,SAAUT,EAAAC,EAAAC,cAAA,wBACxBF,EAAAC,EAAAC,cAACW,EAAD,mBAvBAlB,IAAMkB,WAoCxBG,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD+E3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.529c4cac.chunk.js","sourcesContent":["export default [\n  {\n    date: \"2018-10-17\",\n    title: \"python responder の簡単なREST API\",\n    file: \"20181017.python-responder-simple-rest-api.js\",\n    url: \"python-responder-simple-rest-api\",\n    summary: \"とても簡単なハンズオンです。初めてGitHubのプロジェクトにイシューをあげました。\"\n  },\n]","var map = {\n\t\"./20181017.python-responder-simple-rest-api\": [\n\t\t16,\n\t\t9,\n\t\t1,\n\t\t0\n\t],\n\t\"./20181017.python-responder-simple-rest-api.js\": [\n\t\t16,\n\t\t9,\n\t\t1,\n\t\t0\n\t],\n\t\"./Blog.css\": [\n\t\t29,\n\t\t7,\n\t\t5\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 27;\nmodule.exports = webpackAsyncContext;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './index.css';\nimport mbp from \"./manage.blog.posts\";\nimport * as serviceWorker from './serviceWorker';\n\n\n\nconst Home = React.lazy(() => import(\"./components/Home\"));\n\nconst About = React.lazy(() => import(\"./components/About\"));\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n\n          <Route exact path=\"/\">\n            <React.Suspense fallback={<p>Loading...</p>}>\n              <Home/>\n            </React.Suspense>\n          </Route>\n\n          <Route exact path=\"/about\">\n            <React.Suspense fallback={<p>Loading...</p>}>\n              <About/>\n            </React.Suspense>\n          </Route>\n\n          {mbp.map((b, i) => {\n            const Component = React.lazy(() => import(`./components/blog/${b.file}`));\n            return (\n              <Route key={i} exact path={`/blog/${b.url}`}>\n                <React.Suspense fallback={<p>Loading...</p>}>\n                  <Component/>\n                </React.Suspense>\n              </Route>\n            );\n          })}\n\n        </Switch>\n      </Router>\n    );\n  }\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}