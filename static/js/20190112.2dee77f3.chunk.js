(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{29:function(e,t,a){"use strict";a.r(t),a.d(t,"default",function(){return p});var n=a(6),r=a(7),o=a(9),s=a(8),i=a(10),l=a(0),h=a.n(l),c=a(33),u=a.n(c),p=(a(34),function(e){function t(){return Object(n.a)(this,t),Object(o.a)(this,Object(s.a)(t).apply(this,arguments))}return Object(i.a)(t,e),Object(r.a)(t,[{key:"componentDidMount",value:function(){document.title="Kznovo - "+this.props.title}},{key:"render",value:function(){return h.a.createElement(h.a.Fragment,null,h.a.createElement("h2",null,this.props.title),h.a.createElement("small",null,this.props.date),h.a.createElement("br",null),h.a.createElement("p",null,"This post will be useful for people who wants to setup an SPA on GitHub Pages and wants to know how to handle client-side routing while taking control of the SEO. Hashbang routing may be a bit of 2010-ish tech. But the justification of this tech's usage comes from the fact that Google recently changed their stance towards ajax-based webpage crawling for their search engine, and IMHO it is actually quite new! You'll see..."),h.a.createElement("h3",null,"What is a hashbang?"),h.a.createElement("p",null,"See the url of this post:"),h.a.createElement(u.a,{className:"HTTP"},"https://kznovo.github.io/#!/blog/2019/01/13/blog-project-2-hashbang-routing"),h.a.createElement("p",null,'The "',h.a.createElement("strong",null,"#!"),'" part is called ',h.a.createElement("strong",null,"hashbang"),'. It is sometimes abbreviated as "',h.a.createElement("strong",null,"shebang"),'".'),h.a.createElement("p",null,h.a.createElement("strong",null,"Hash (#)")," inside URL enforces browser to use only the strings ",h.a.createElement("strong",null,"before")," the syntax upon making any HTTP request to the server. It is typically used for either one of the following purposes:"),h.a.createElement("ul",null,h.a.createElement("li",null,"To jump sections within an HTML. For example, this wikipedia page URL:",h.a.createElement(u.a,{className:"HTTP"},"https://en.wikipedia.org/wiki/Unicorn#Similar_animals_in_religion_and_myth"),"If you access it, your browser only sends an HTTP request to ",h.a.createElement("i",null,"https://en.wikipedia.org/wiki/Unicorn"),". Then the string after the hash (",h.a.createElement("i",null,"Similar_animals_in_religion_and_myth"),") is used to move the view of the content to that section after the page is loaded to the browser. This usage of hash is usually called the ",h.a.createElement("strong",null,"anchor"),"."),h.a.createElement("li",null,"The string after the hash is used by the Javascript code to render contents dynamically inside the browser. This is called ",h.a.createElement("strong",null,"Ajax-based webpage"),", and when this behavior is used to mimic page transition by re-rendering most of the contents on the page, it is called ",h.a.createElement("strong",null,"client-side routing"),".")),h.a.createElement("p",null,"Used with ",h.a.createElement("strong",null,"bang (!)"),", the syntax becomes hashbang, which instructs Google's spider robots, aka Googlebots, to index the contents of the page for their search engine on the full path. This technique was ",h.a.createElement("a",{href:"https://webmasters.googleblog.com/2009/10/proposal-for-making-ajax-crawlable.html",target:"_blank",rel:"noopener noreferrer"},"proposed by Google back in 2009"),' when Ajax-based webpages was becoming a thing, and back then the web developers would prepare a static HTML called "HTML snapshot" for the Googlebots to crawl for each URL specified by hashbang. Many websites such as Twitter and Facebook started to adopt this practice, but eventually stopped because of the criticism around performance deterioration, code bug vulnerability, and ugly URL. The criticism really sparked around 2012 when the large American gossip news media Gawker ',h.a.createElement("a",{href:"https://www.wired.com/2011/02/gawker-learns-the-hard-way-why-hash-bang-urls-are-evil/",target:"_blank",rel:"noopener noreferrer"},"adopted hashbang and broke its entire website"),". In 2015, ",h.a.createElement("a",{href:"https://webmasters.googleblog.com/2015/10/deprecating-our-ajax-crawling-scheme.html",target:"_blank",rel:"noopener noreferrer"},"Google officially deprecated the ajax-crawling scheme it proposed in 2009"),". Today, it is generally considered a bad excersise to use hashbang for routing. Instead, the web community suggests using the ",h.a.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/History_API",target:"_blank",rel:"noopener noreferrer"},"HTML5 history api")," to handle dynamic page rendering."),h.a.createElement("h3",null,"Then why use hashbang?"),h.a.createElement("p",null,"Because this blog is dynamically rendered SPA (single page application), and hashbang is the only sensible way to take care of both the routing and the SEO on GitHub Pages. And although I mentioned it has been abandoned by Google before, it got its support back from Google recently."),h.a.createElement("p",null,"Since this blog is an SPA written in React, I need all the requests coming into this website to fetch the root index.html file that holds the Javascript first, otherwise nothing would render properly. GitHub Pages throws 404 not found error response if my URL looks like this:"),h.a.createElement(u.a,{className:"HTTP"},"https://kznovo.github.io/blog/2019/01/13/blog-project-2-hashbang-routing"),h.a.createElement("p",null,"The browser tries to fetch resources at the ",h.a.createElement("i",null,"/blog/2019/01/13/blog-project-2-hashbang-routing")," endpoint, where there is no resource exposed. Instead, by having the hashbang sit right after the root url, the subsequent parameters are ignored at request, but once index.html is loaded, the contents are rendered dynamically based on the full path's parameters."),h.a.createElement("p",null,"GitHub Pages actually presents two options to bypass the client-side routing issue, and one of the options is to use the hash-based routing discussed above. The other option is to use the custom GitHub Pages 404 fallback feature, which I chose not to use. GitHub Pages enables users to use their own HTML file to be rendered whenever the server issues a 404 response. Users could either render the dynamic contents on this file itself by copying the same HTML/CSS/Javascript as the root HTML file, or issue a redirect to the root HTML file and keep on rendering there. This is a hacky workaround, and it involves an inevitable 404 response which I did not like. It also messes up the SEO as Googlebots would consider the 404 response as an error and do not index the page at all. ",h.a.createElement("a",{href:"https://github.com/isaacs/github/issues/408#issuecomment-392296363",target:"_blank",rel:"noopener noreferrer"},"Same kind of issue seems to happen on Twitter's Card Validator and Facebook's Sharing Debugger")," as well."),h.a.createElement("p",null,"Despite all the criticisms towards hashbangs as I discussed in the previous section, ",h.a.createElement("a",{href:"https://webmasters.googleblog.com/2017/12/rendering-ajax-crawling-pages.html",target:"_blank",rel:"noopener noreferrer"},"Google officially resumed supporting hashbang crawling starting from the second quarter of 2018"),", so the search engine support issue is kind of gone now. There's even a slight upgrade from the previous ajax-crawling scheme, that now Googlebots can execute the javascript themselves to take the snapshot of the webpage, thus there's no need to create the \"HTML snapshot\" anymore. It is still true that the URL looks ugly and a single typo in my Javascript would screw up my entire website. However, compared to the another hacky option, this route presents more merits than the other, such as the SEO support and no mandatory 404 error responses."),h.a.createElement("h3",null,"Implementing hashbang routes"),h.a.createElement("p",null,"This was easy as I am using the ",h.a.createElement("a",{href:"https://github.com/ReactTraining/react-router/tree/master/packages/react-router-dom",target:"_blank",rel:"noopener noreferrer"},"react-router-dom")," npm package that supports it out of the box. All I had to do was to swap the router object from ",h.a.createElement("strong",null,h.a.createElement("a",{href:"https://reacttraining.com/react-router/web/api/BrowserRouter",target:"_blank",rel:"noopener noreferrer"},"BrowserRouter"))," to ",h.a.createElement("strong",null,h.a.createElement("a",{href:"https://reacttraining.com/react-router/web/api/HashRouter",target:"_blank",rel:"noopener noreferrer"},"HashRouter")),". Also, HashRouter takes ",h.a.createElement("strong",null,h.a.createElement("a",{href:"https://reacttraining.com/react-router/web/api/HashRouter/hashtype-string",target:"_blank",rel:"noopener noreferrer"},"hashType"))," argument in which I can specify ",h.a.createElement("i",null,"hashbang")," as the type of hash to use. The below is the simplified example:"),h.a.createElement(u.a,{className:"javascript"},'import React from "react";\nimport ReactDOM from \'react-dom\';\nimport { HashRouter as Router, Route, Switch } from "react-router-dom";\n\n\nconst Home = () => <p>Home Page!</p>;\n\nconst About = () => <p>About Page!</p>;\n\n\nclass App extends React.Component {\n  render() {\n    return(\n      <Router hashType="hashbang">\n        <Switch>\n          <Route exact path="/" component={Home}>\n          <Route exact path="/" component={About}>\n        </Switch>\n      <Router>\n    );\n  }\n}\n\nReactDOM.render(<App/>, document.getElementById("root"));'),h.a.createElement("p",null,"Nothing very technical."),h.a.createElement("p",null,"Now, if I am managing my own file server for this website, I'd use the HTML5 history pushState api. This can be achieved by configuring the server to forcefully use the root index HTML file everytime there's a request, and each server has its own way of implementing this, but GitHub Pages does not present the users with this option as of now."),h.a.createElement("h3",null,"What happens to the ",h.a.createElement("a",{href:"https://twitter.com/KazuyaHatta/status/1081464142710505472",target:"_blank",rel:"noopener noreferrer"},"tweet I made about the previous post")," using a different URL?"),h.a.createElement("p",null,"For now, there is nothing I can do about it. This is something that bugs me. What if GitHub Pages starts to support client-side routing and opens up their server configurations? That would be cool, but am I going to change the URL again? That will be ",h.a.createElement("a",{href:"https://www.w3.org/Provider/Style/URI.html",target:"_blank",rel:"noopener noreferrer"},"uncool"),"."))}}]),t}(h.a.Component))},34:function(e,t,a){}}]);
//# sourceMappingURL=20190112.2dee77f3.chunk.js.map